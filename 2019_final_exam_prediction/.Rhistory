summary(fit)
coef(fit)
test_data<-data.frame(Income=45000,Age=5)
test_data$probe<-predict(fit,newdata = test_data,type = "response")
test_data
#H0:两模型无显著差别；HA:两模型有显著差别
anova(fit.full,fit.reduced,test = "Chisq")
knitr::opts_chunk$set(echo = TRUE)
Sys.setlocale('LC_ALL','C')
GDS2676<-read.table("./data/GDS2676.txt",header = T)
boxplot(GDS2676)
library(limma)
GDS2676.norm<-normalizeQuantiles(GDS2676)
boxplot(GDS2676.norm)
p.value<-apply(GDS2676.norm,1,function(x)wilcox.test(x[seq(1,11,2)],x[seq(2,12,2)],paired = T,alternative ="less",exact = F)$p.value)
sum(p.value<0.05)
head(p.value)
downregulatedgenes_all<-row.names(GDS2676.norm)[p.value<0.05]
order_p.value<-data.frame(sort(p.value))
order_names<-rownames(order_p.value)[1:20]
order_names
GO<-read.table("./data/GO_2_2.txt",row.names=1)
GO.name<-row.names(GO)
N.total<-nrow(GDS2676.norm);N.total
DEGs.p.value<-p.value[p.value<0.05]
DEGs.name<-names(DEGs.p.value)
noDEGs.p.values<-p.value[p.value>=0.05]
noDEGs.name<-names(noDEGs.p.values)
#既有差异表达且在GO表中(列联表左上角)
N1<-length(intersect(DEGs.name,GO.name));N1
#没有差异表达但在GO表中(列联表右上角)
N2<-length(intersect(noDEGs.name,GO.name));N2
#有差异表达但不在GO表中(列联表左下角)
N3<-length(DEGs.name)-N1;N3
#既无差异表达且不在GO表中（列联表右下角）
N4<-N.total-N1-N2-N3;N4
counts<-matrix(data=c(N1,N2,N3,N4),nrow=2,byrow=T,dimnames=list(c("in GO","no in GO"),c("DEGs","noDEGs")));counts
fisher.test(counts)
library(readr)
rat_weight <- read_csv("./data/biostats_homework_weight.csv")
shapiro.test(rat_weight$weight[rat_weight$A=="A1"])
shapiro.test(rat_weight$weight[rat_weight$A=="A2"])
shapiro.test(rat_weight$weight[rat_weight$A=="A3"])
shapiro.test(rat_weight$weight[rat_weight$B=="B1"])
shapiro.test(rat_weight$weight[rat_weight$B=="B2"])
bartlett.test(weight~A,data = rat_weight)
bartlett.test(weight~B,data = rat_weight)
#(2)
t_test <- function(x) {
x <- unlist(x)
if (var.test(x[1:10],x[11:18])$p.value < 0.05) {
t.test(x[1:10],x[11:18],var.equal = F,alternative = "less")$p.value
}else {
t.test(x[1:10],x[11:18],var.equal = T,alternative = "less")$p.value
}
}
GDS_norm$pvalue <- apply(GDS_norm,1,t_test)
GDS43013 <- read.table("./data/GDS4013_2015.txt",header = T)
GDS43013_sample <- read.table("./data/GDS4013_sample.txt",header = F)
methylation <- read.table("./data/methylation.txt",header = F)
#(1)
table(is.na(GDS43013))
table(is.na(methylation))
# 这里没有缺失值，有缺失值的话用na.omit(GDS43013)即可。
library(limma)
GDS_norm <- normalizeQuantiles(GDS43013) # 数据标准化
#(2)
t_test <- function(x) {
x <- unlist(x)
if (var.test(x[1:10],x[11:18])$p.value < 0.05) {
t.test(x[1:10],x[11:18],var.equal = F,alternative = "less")$p.value
}else {
t.test(x[1:10],x[11:18],var.equal = T,alternative = "less")$p.value
}
}
GDS_norm$pvalue <- apply(GDS_norm,1,t_test)
rownames(GDS_norm)[order(GDS_norm$pvalue)[1:20]]
#(2)
t_test <- function(x) {
x <- unlist(x)
if (var.test(x[1:10],x[11:18])$p.value < 0.05) {
t.test(x[1:10],x[11:18],var.equal = F,alternative = "less")$p.value
}else {
t.test(x[1:10],x[11:18],var.equal = T,alternative = "less")$p.value
}
}
GDS_norm$pvalue <- apply(GDS_norm,1,t_test)
rownames(GDS_norm)[order(GDS_norm$pvalue)[1:20]]
GDS43013 <- read.table("./data/GDS4013.txt",header = T)
GDS43013_sample <- read.table("./data/GDS4013_sample.txt",header = F)
methylation <- read.table("./data/methylation.txt",header = F)
#(1)
table(is.na(GDS43013))
table(is.na(methylation))
# 这里没有缺失值，有缺失值的话用na.omit(GDS43013)即可。
library(limma)
GDS_norm <- normalizeQuantiles(GDS43013) # 数据标准化
GDS43013 <- read.table("./data/GDS4013_2015.txt",header = T)
GDS43013_sample <- read.table("./data/GDS4013_sample.txt",header = F)
methylation <- read.table("./data/methylation.txt",header = F)
#(1)
table(is.na(GDS43013))
table(is.na(methylation))
# 这里没有缺失值，有缺失值的话用na.omit(GDS43013)即可。
library(limma)
GDS_norm <- normalizeQuantiles(GDS43013) # 数据标准化
set.seed(20190614)
# 注意是随机抽样，每个人的结果可能有不同的地方。
deg <- sample(rownames(GDS_norm[GDS_norm$pvalue < 0.05,]),size = 20)
# 输入数据
weight1 <- c(40,10,35,25,20,15,35,15,-5,30,25,70,65,45,50)
weight2 <- c(50,20,45,55,20,15,80,-10,105,75,10,60,45,60,30)
weight3 <- c(60,30,100,85,20,55,45,30,77,105)
# 正态性检验
shapiro.test(weight1)
shapiro.test(weight2)
shapiro.test(weight3)
weights <- c(weight1,weight2,weight3)
drugs <- factor(c(rep("drug1",15),rep("drug2",15),rep("drug3",10)))
# 方差齐性检验
bartlett.test(weights,g = drugs)
#方差分析
weight_aov <- aov(lm(weights~drugs))
summary(weight_aov)
TukeyHSD(weight_aov)
plot(TukeyHSD(weight_aov))
weights
addweight <- data.frame(weight1,weight2,weight3)
library(readxl)
homework_6_1_data <- read_excel("./data/homework-6.1-data.xlsx")
library(readxl)
homework_6_1_data <- read_excel("./data/homework-6.1-data.xlsx")
y <- homework_6_1_data$y
x1 <- homework_6_1_data$x1
x2 <- homework_6_1_data$x2
ff <- lm(y~x1+x2)
ff
summary(ff)
library(readr)
breast_cancer <- read_csv("./data/homework-6.6-data.csv")
labels <- breast_cancer$diagnosis
labels[labels=="M"] <- 1
labels[labels=="B"] <- 0
labels <- as.integer(labels)
breast_cancer$lables <- labels
fit.full <- glm(lables~radius_mean+texture_mean+perimeter_mean+area_mean+smoothness_mean+compactness_mean+concavity_mean+`concave points_mean`+symmetry_mean+fractal_dimension_mean,data = breast_cancer,family = binomial(),control=list(maxit=100))
summary(fit.full)
install.packages("pROC")
library("pROC")
library(readr)
breast_cancer <- read_csv("./data/homework-6.6-data.csv")
labels <- breast_cancer$diagnosis
labels[labels=="M"] <- 1
labels[labels=="B"] <- 0
labels <- as.integer(labels)
breast_cancer$lables <- labels
fit.full <- glm(lables~radius_mean+texture_mean+perimeter_mean+area_mean+smoothness_mean+compactness_mean+concavity_mean+`concave points_mean`+symmetry_mean+fractal_dimension_mean,data = breast_cancer,family = binomial(),control=list(maxit=100))
summary(fit.full)
fit.reduced<-glm(lables~texture_mean+area_mean+smoothness_mean+`concave points_mean`,data = breast_cancer,family = binomial(),control=list(maxit=100))
summary(fit.reduced)
#H0:两模型无显著差别；HA:两模型有显著差别
anova(fit.full,fit.reduced,test = "Chisq")
train_data <- breast_cancer[1:398,]
test_data <- breast_cancer[399:569,]
train_fit<-glm(lables~texture_mean+area_mean+smoothness_mean+`concave points_mean`,data = train_data,family = binomial())
summary(train_fit)
test_data$probe<-predict(train_fit,newdata = test_data,type = "response")
plot(sort(test_data$lables))
plot(sort(test_data$probe))
# install.packages("pROC")
library('pROC')
model_roc <- roc(test_data$lables,test_data$probe)
plot(model_roc,print.auc = T)
test_data$lables
lables <- test_data$lables
probe <- test_data$probe
mean(labels==probe)
probe
length(probe)
length(lables)
pred_num <- ifelse(test_data$probe > 0.5, 1, 0)
pred_num
pred_lables <- ifelse(test_data$probe > 0.5, 1, 0)
mean(pred_lables==lables)
train_data <- breast_cancer[1:398,]
test_data <- breast_cancer[399:569,]
train_fit<-glm(lables~texture_mean+area_mean+smoothness_mean+`concave points_mean`,data = train_data,family = binomial())
summary(train_fit)
test_data$probe<-predict(train_fit,newdata = test_data,type = "response")
lables <- test_data$lables
pred_lables <- ifelse(test_data$probe > 0.5, 1, 0)
mean(pred_lables==lables)
plot(sort(test_data$lables))
plot(sort(test_data$probe))
# install.packages("pROC")
library('pROC')
model_roc <- roc(test_data$lables,test_data$probe)
plot(model_roc,print.auc = T)
GDS43013 <- read.table("./data/GDS4013.txt",header = T)
GDS43013 <- read.table("./data/GDS4013.txt",header = T)
table(is.na(GDS43013))
p.var	<-	apply(GDS_norm,	1,	function(x)	var.test(x[1:10],	x[11:18])$p.value)
GDS_norm <- cbind(GDS_norm,p.var)
p.var	<-	apply(GDS_norm,	1,	function(x)	var.test(x[1:10],	x[11:18])$p.value)
GDS_norm <- cbind(GDS_norm,p.var)
#	LF:	x[1:10]	HF:	x[11:18];	HF>LF,	LF	<HF
#	var.test	result	in	x[19]
p.t	<-	apply(nash.2,1,function(x)t.test(x[1:10],x[11:18],alternative=c("less"),var.equal	=	x[19]>=0.05)$p.value)
p.var	<-	apply(GDS_norm,	1,	function(x)	var.test(x[1:10],	x[11:18])$p.value)
GDS_norm <- cbind(GDS_norm,p.var)
#	LF:	x[1:10]	HF:	x[11:18];	HF>LF,	LF	<HF
#	var.test	result	in	x[19]
p.t	<-	apply(GDS_norm,1,function(x)t.test(x[1:10],x[11:18],alternative=c("less"),var.equal	=	x[19]>=0.05)$p.value)
table(p.t<0.05)
#先计算var.test结果，放在最后一列
p.var	<-	apply(GDS_norm,	1, function(x)	var.test(x[1:10],	x[11:18])$p.value)
GDS_norm <- cbind(GDS_norm,p.var)
#	LF:	x[1:10]	HF:	x[11:18];	HF>LF,	LF	<HF
#	var.test	result	in	x[19]
p.t	<-	apply(GDS_norm,1,function(x)t.test(x[1:10],x[11:18],alternative=c("less"),var.equal	=	x[19]>=0.05)$p.value)
table(p.t<0.05)
names(sort(p.t)[1:20])
set.seed(20190614)
# 注意是随机抽样，每个人的结果可能有不同的地方。
DEG_name	<-	sample(names(p.t[p.t	<	0.05]),	100)
non_DEG_name	<-	sample(names(p.t[p.t	>	0.05]),	100)
methy_DEG	<-	methy[methy$V1	%in%	DEG_name,	]
set.seed(20190614)
# 注意是随机抽样，每个人的结果可能有不同的地方。
DEG_name	<-	sample(names(p.t[p.t	<	0.05]),	100)
non_DEG_name	<-	sample(names(p.t[p.t	>	0.05]),	100)
methy_DEG	<-	methylation[methylation$V1	%in%	DEG_name,	]
methy_non_DEG	<-	methylation[methylation$V1	%in%	non_DEG_name,	]
t.test(methy_DEG$V2,methy_non_DEG$V2,var.equal=(var.test(methy_DEG$V2,methy_non_DEG$V2)$p.value	>=	0.05)) #根据方差齐性检验做t-test。
set.seed(20190614)
# 注意是随机抽样，每个人的结果可能有不同的地方。
DEG_name	<-	sample(names(p.t[p.t	<	0.05]),	100)
non_DEG_name	<-	sample(names(p.t[p.t	>	0.05]),	100)
methy_DEG	<-	methylation[methylation$V1	%in%	DEG_name,	]
methy_non_DEG	<-	methylation[methylation$V1	%in%	non_DEG_name,	]
t.test(methy_DEG$V2,methy_non_DEG$V2,var.equal=(var.test(methy_DEG$V2,methy_non_DEG$V2)$p.value	>=	0.05)) #根据方差齐性检验做t-test。
# 注意是随机抽样，每个人的结果可能有不同的地方。
DEG_name	<-	sample(names(p.t[p.t	<	0.05]),	100)
non_DEG_name	<-	sample(names(p.t[p.t	>	0.05]),	100)
methy_DEG	<-	methylation[methylation$V1	%in%	DEG_name,	]
methy_non_DEG	<-	methylation[methylation$V1	%in%	non_DEG_name,	]
t.test(methy_DEG$V2,methy_non_DEG$V2,var.equal=(var.test(methy_DEG$V2,methy_non_DEG$V2)$p.value	>=	0.05)) #根据方差齐性检验做t-test。
# 注意是随机抽样，每个人的结果可能有不同的地方。
DEG_name	<-	sample(names(p.t[p.t	<	0.05]),	100)
non_DEG_name	<-	sample(names(p.t[p.t	>	0.05]),	100)
methy_DEG	<-	methylation[methylation$V1	%in%	DEG_name,	]
methy_non_DEG	<-	methylation[methylation$V1	%in%	non_DEG_name,	]
t.test(methy_DEG$V2,methy_non_DEG$V2,var.equal=(var.test(methy_DEG$V2,methy_non_DEG$V2)$p.value	>=	0.05)) #根据方差齐性检验做t-test。
set.seed(20190614)
# 注意是随机抽样，每个人的结果可能有不同的地方。
DEG_name	<-	sample(names(p.t[p.t	<	0.05]),	100)
non_DEG_name	<-	sample(names(p.t[p.t	>	0.05]),	100)
methy_DEG	<-	methylation[methylation$V1	%in%	DEG_name,	]
methy_non_DEG	<-	methylation[methylation$V1	%in%	non_DEG_name,	]
t.test(methy_DEG$V2,methy_non_DEG$V2,var.equal=(var.test(methy_DEG$V2,methy_non_DEG$V2)$p.value	>=	0.05)) #根据方差齐性检验做t-test。
set.seed(20190614)
# 注意是随机抽样，每个人的结果可能有不同的地方。
DEG_name	<-	sample(names(p.t[p.t	<	0.05]),	100)
non_DEG_name	<-	sample(names(p.t[p.t	>	0.05]),	100)
methy_DEG	<-	methylation[methylation$V1	%in%	DEG_name,	]
methy_non_DEG	<-	methylation[methylation$V1	%in%	non_DEG_name,	]
t.test(methy_DEG$V2,methy_non_DEG$V2,var.equal=(var.test(methy_DEG$V2,methy_non_DEG$V2)$p.value	>=	0.05)) #根据方差齐性检验做t-test。
set.seed(20190614)
# 注意是随机抽样，每个人的结果可能有不同的地方。
DEG_name	<-	sample(names(p.t[p.t	<	0.05]),	100)
non_DEG_name	<-	sample(names(p.t[p.t	>	0.05]),	100)
methy_DEG	<-	methylation[methylation$V1	%in%	DEG_name,	]
methy_non_DEG	<-	methylation[methylation$V1	%in%	non_DEG_name,	]
t.test(methy_DEG$V2,methy_non_DEG$V2,var.equal=(var.test(methy_DEG$V2,methy_non_DEG$V2)$p.value	>=	0.05)) #根据方差齐性检验做t-test。
# 注意是随机抽样，每个人的结果可能有不同的地方。
DEG_name	<-	sample(names(p.t[p.t	<	0.05]),	100)
non_DEG_name	<-	sample(names(p.t[p.t	>	0.05]),	100)
methy_DEG	<-	methylation[methylation$V1	%in%	DEG_name,	]
methy_non_DEG	<-	methylation[methylation$V1	%in%	non_DEG_name,	]
t.test(methy_DEG$V2,methy_non_DEG$V2,var.equal=(var.test(methy_DEG$V2,methy_non_DEG$V2)$p.value	>=	0.05)) #根据方差齐性检验做t-test。
set.seed(20190614)
# 注意是随机抽样，每个人的结果可能有不同的地方。
DEG_name	<-	sample(names(p.t[p.t	<	0.05]),	100)
non_DEG_name	<-	sample(names(p.t[p.t	>	0.05]),	100)
methy_DEG	<-	methylation[methylation$V1	%in%	DEG_name,	]
methy_non_DEG	<-	methylation[methylation$V1	%in%	non_DEG_name,	]
t.test(methy_DEG$V2,methy_non_DEG$V2,var.equal=(var.test(methy_DEG$V2,methy_non_DEG$V2)$p.value	>=	0.05)) #根据方差齐性检验做t-test。
set.seed(614)
# 注意是随机抽样，每个人的结果可能有不同的地方。
DEG_name	<-	sample(names(p.t[p.t	<	0.05]),	100)
non_DEG_name	<-	sample(names(p.t[p.t	>	0.05]),	100)
methy_DEG	<-	methylation[methylation$V1	%in%	DEG_name,	]
methy_non_DEG	<-	methy[methylation$V1	%in%	non_DEG_name,	]
set.seed(614)
# 注意是随机抽样，每个人的结果可能有不同的地方。
DEG_name	<-	sample(names(p.t[p.t	<	0.05]),	100)
non_DEG_name	<-	sample(names(p.t[p.t	>	0.05]),	100)
methy_DEG	<-	methylation[methylation$V1	%in%	DEG_name,	]
methy_non_DEG	<-	methylation[methylation$V1	%in%	non_DEG_name,	]
t.test(methy_DEG$V2,methy_non_DEG$V2,var.equal=(var.test(methy_DEG$V2,methy_non_DEG$V2)$p.value	>=	0.05)) #根据方差齐性检验做t-test。
set.seed(6141)
# 注意是随机抽样，每个人的结果可能有不同的地方。
DEG_name	<-	sample(names(p.t[p.t	<	0.05]),	100)
non_DEG_name	<-	sample(names(p.t[p.t	>	0.05]),	100)
methy_DEG	<-	methylation[methylation$V1	%in%	DEG_name,	]
methy_non_DEG	<-	methylation[methylation$V1	%in%	non_DEG_name,	]
t.test(methy_DEG$V2,methy_non_DEG$V2,var.equal=(var.test(methy_DEG$V2,methy_non_DEG$V2)$p.value	>=	0.05)) #根据方差齐性检验做t-test。
set.seed(6142)
# 注意是随机抽样，每个人的结果可能有不同的地方。
DEG_name	<-	sample(names(p.t[p.t	<	0.05]),	100)
non_DEG_name	<-	sample(names(p.t[p.t	>	0.05]),	100)
methy_DEG	<-	methylation[methylation$V1	%in%	DEG_name,	]
methy_non_DEG	<-	methylation[methylation$V1	%in%	non_DEG_name,	]
t.test(methy_DEG$V2,methy_non_DEG$V2,var.equal=(var.test(methy_DEG$V2,methy_non_DEG$V2)$p.value	>=	0.05)) #根据方差齐性检验做t-test。
set.seed(6143)
# 注意是随机抽样，每个人的结果可能有不同的地方。
DEG_name	<-	sample(names(p.t[p.t	<	0.05]),	100)
non_DEG_name	<-	sample(names(p.t[p.t	>	0.05]),	100)
methy_DEG	<-	methylation[methylation$V1	%in%	DEG_name,	]
methy_non_DEG	<-	methylation[methylation$V1	%in%	non_DEG_name,	]
t.test(methy_DEG$V2,methy_non_DEG$V2,var.equal=(var.test(methy_DEG$V2,methy_non_DEG$V2)$p.value	>=	0.05)) #根据方差齐性检验做t-test。
set.seed(614)
# 注意是随机抽样，每个人的结果可能有不同的地方。
DEG_name	<-	sample(names(p.t[p.t	<	0.05]),	100)
non_DEG_name	<-	sample(names(p.t[p.t	>	0.05]),	100)
methy_DEG	<-	methylation[methylation$V1	%in%	DEG_name,	]
methy_non_DEG	<-	methylation[methylation$V1	%in%	non_DEG_name,	]
t.test(methy_DEG$V2,methy_non_DEG$V2,var.equal=(var.test(methy_DEG$V2,methy_non_DEG$V2)$p.value	>=	0.05)) #根据方差齐性检验做t-test。
#(4)
n1	<-	length(methy_DEG$V2)
var1	<-	var(methy_DEG$V2)
n2	<-	length(methy_non_DEG$V2)
var2	<-	var(methy_non_DEG$V2)
# pooled variance即合并方差,参见后面公式。
pool_var	<-	((n1-1)	*	var1	+	(n2-1)	*	var2)	/	(n1+n2-2)
#	根据混池计算效应值
ds	=	(mean(methy_DEG$V2)	-	mean(methy_non_DEG$V2))	/	sqrt(pool_var)
library(pwr)
powers	<-	pwr.t.test(n=100,	d=ds,	sig.level=0.05,type="two.sample",	alternative	=	"two.sided")
powers
GDS43013 <- read.table("./data/GDS4013.txt",header = T)
GDS43013_sample <- read.table("./data/GDS4013_sample.txt",header = F)
methylation <- read.table("./data/methylation.txt",header = F)
#(1)
table(is.na(GDS43013))
table(is.na(methylation))
GDS43013 <- na.omit(GDS43013)
# 这里采用limma包
library(limma)
GDS_norm <- normalizeQuantiles(GDS43013) # 数据标准化
#先计算var.test结果，放在最后一列
p.var	<-	apply(GDS_norm,	1, function(x)	var.test(x[1:10],	x[11:18])$p.value)
GDS_norm <- cbind(GDS_norm,p.var)
#	LF:	x[1:10]	HF:	x[11:18];	HF>LF,	LF	<HF
#	var.test	result	in	x[19]
p.t	<-	apply(GDS_norm,1,function(x)t.test(x[1:10],x[11:18],alternative=c("less"),var.equal	=	x[19]>=0.05)$p.value)
table(p.t<0.05)
names(sort(p.t)[1:20])
knitr::opts_chunk$set(echo = TRUE)
expression_data <- read.table('./data/q3_BC.txt',header = T)
q3_BC <- read.table('./data/q3_BC.txt',header = T)
q3_BC <- read.table('./data/q3_BC.txt',header = T)
fit.full <- glm(lables~.,data = breast_cancer,family = binomial(),control=list(maxit=100))
fit.full <- glm(lables~.,data = breast_cancer,family = binomial(),control=list(maxit=100))
fit.full
q3_BC <- read.table('./data/q3_BC.txt',header = T)
fit.full <- glm(lables~.,data = breast_cancer,family = binomial(),control=list(maxit=100))
summary(fit.full)
q3_BC <- read.table('./data/q3_BC.txt',header = T)
fit.full <- glm(lables~.,data = q3_BC,family = binomial(),control=list(maxit=100))
View(q3_BC)
q3_BC <- read.table('./data/q3_BC.txt',header = T)
fit.full <- glm(diagnosis~.,data = q3_BC,family =  binomial(),control=list(maxit=100))
summary(fit.full)
q3_BC <- read.table('./data/q3_BC.txt',header = T)
fit.full <- glm(diagnosis~.,data = q3_BC,family =  binomial())
summary(fit.full)
fit.reduced<-glm(diagnosis~texture+area+smoothness+concave.points,data = q3_BC,family = binomial())
summary(fit.reduced)
#H0:两模型无显著差别；HA:两模型有显著差别
anova(fit.full,fit.reduced,test = "Chisq")
train_data <- q3_BC[1:398,]
test_data <- q3_BC[399:569,]
train_fit<-glm(lables~texture_mean+area_mean+smoothness_mean+`concave points_mean`,data = train_data,family = binomial())
train_data <- q3_BC[1:398,]
test_data <- q3_BC[399:569,]
train_fit<-glm(diagnosis~texture+area+smoothness+concave.points,data = train_data,family = binomial())
summary(train_fit)
test_data$probe<-predict(train_fit,newdata = test_data,type = "response")
lables <- test_data$lables
pred_lables <- ifelse(test_data$probe > 0.5, 1, 0)
mean(pred_lables==lables)
q3_BC <- read.table('./data/q3_BC.txt',header = T)
fit.full <- glm(diagnosis~.,data = q3_BC,family =  binomial())
summary(fit.full)
setwd("~/2019_final_exam_prediction")
q3_BC <- read.table('./data/q3_BC.txt',header = T)
fit.full <- glm(diagnosis~.,data = q3_BC,family =  binomial())
summary(fit.full)
fit.reduced<-glm(diagnosis~texture+area+smoothness+concave.points,data = q3_BC,family = binomial())
summary(fit.reduced)
anova(fit.full,fit.reduced,test = "Chisq")
train_data <- q3_BC[1:398,]
test_data <- q3_BC[399:569,]
train_fit<-glm(diagnosis~texture+area+smoothness+concave.points,data = train_data,family = binomial())
summary(train_fit)
test_data$probe<-predict(train_fit,newdata = test_data,type = "response")
lables <- test_data$lables
pred_lables <- ifelse(test_data$probe > 0.5, 1, 0)
mean(pred_lables==lables)
train_data <- q3_BC[1:398,]
test_data <- q3_BC[399:569,]
train_fit<-glm(diagnosis~texture+area+smoothness+concave.points,data = train_data,family = binomial())
summary(train_fit)
test_data$probe<-predict(train_fit,newdata = test_data,type = "response")
lables <- test_data$diagnosis
pred_lables <- ifelse(test_data$probe > 0.5, 1, 0)
mean(pred_lables==lables)
plot(sort(test_data$lables))
plot(sort(test_data$diagnosis))
plot(sort(test_data$probe))
# install.packages("pROC")
library('pROC')
model_roc <- roc(test_data$lables,test_data$probe)
plot(sort(test_data$diagnosis))
plot(sort(test_data$probe))
# install.packages("pROC")
library('pROC')
model_roc <- roc(test_data$diagnosis,test_data$probe)
plot(model_roc,print.auc = T)
plot(sort(test_data$diagnosis))
plot(sort(test_data$probe))
# install.packages("pROC")
library('pROC')
model_roc <- roc(lables,pred_lables)
plot(model_roc,print.auc = T)
q4_data <- read.table("./data/q4_data.txt", header = T)
q4_data <- read.table("./data/q4_data.txt", header = T,stringsAsFactors = T)
q4_data <- read.table("./data/q4_data.txt", header = T,stringsAsFactors = T)
#import data and transform it
exp_matrix <- apply(q4_data[,2:11],1,function(x){as.numeric(cbind(x))})
exp_matrix <- data.frame(exp_matrix)
rownames(exp_matrix) <- colnames(q4_data)[-1]
names(exp_matrix) <- q4_data[,1]
#check NA
table(is.na(exp_matrix))
View(exp_matrix)
View(exp_matrix)
exp_matrix_norm<-apply(exp_matrix,2, function(x){x/mean(x)})
View(exp_matrix_norm)
exp_matrix_norm<-apply(exp_matrix,1, function(x){x/mean(x)})
exp_matrix_norm<-apply(exp_matrix,2, function(x){x/mean(x)})
View(exp_matrix)
View(exp_matrix_norm)
boxplot(exp_matrix)
boxplot(exp_matrix,2)
boxplot(q4_data[,2:11])
View(exp_matrix_norm)
boxplot(exp_matrix[1:10,])
boxplot(exp_matrix[1:10])
boxplot(exp_matrix[,1:10])
exp_matrix[,1:10]
exp_matrix[,:]
exp_matrix[1]
View(exp_matrix_norm)
exp_matrix[1:]
exp_matrix[1:,]
exp_matrix[1,:]
exp_matrix[1,]
exp_matrix[,]
boxplot(exp_matrix[,])
boxplot(exp_matrix_norm)
boxplot(t(exp_matrix_norm))
boxplot(q4_data[,2:11])
boxplot(t(exp_matrix_norm))
boxplot(q4_data[,2:11])
boxplot(t(exp_matrix_norm))
exp_matrix_norm <- normalizeQuantiles(exp_matrix)
boxplot(t(exp_matrix_norm))
View(exp_matrix_norm)
t(exp_matrix_norm)
exp_matrix$pvalue <- apply(exp_matrix_norm,1,q4_t_test)
q4_t_test <- function(x) {
x <- unlist(x)
if (var.test(x[1:161],x[162:346])$p.value < 0.01) {
t.test(x[1:161],x[162:346],var.equal = F,alternative = "less",conf.level = 0.99)$p.value
}else {
t.test(x[1:161],x[162:346],var.equal = T,alternative = "less",conf.level = 0.99)$p.value
}
}
exp_matrix$pvalue <- apply(exp_matrix_norm,1,q4_t_test)
var.test(x[1:161],x[162:346])$p.value < 0.01
p.var.test<-apply(exp_matrix_norm,1,function(x) var.test(x[1:161],x[162:346])$p.value)
p.var.test
p.var.test<-apply(exp_matrix_norm,1,function(x) var.test(x[1:161],x[162:346],conf.level = 0.99)$p.value)
p.var.test
exp_matrix_norm	<- cbind(exp_matrix_norm,	p.var.test)
exp_matrix_norm	<- cbind(exp_matrix_norm,p.var.test)
exp_matrix_norm <- cbind(exp_matrix_norm,p.var.test)
View(exp_matrix_norm)
View(exp_matrix_norm)
exp_matrix_norm<-apply(exp_matrix,2, function(x){x/mean(x)})
View(exp_matrix_norm)
p.var.test<-apply(exp_matrix_norm,1,function(x) var.test(x[1:161],x[162:346],conf.level = 0.99)$p.value)
exp_matrix_norm$p.var.test <- cbind(exp_matrix_norm,p.var.test)
exp_matrix_norm<-apply(exp_matrix,2, function(x){x/mean(x)})
View(exp_matrix_norm)
exp_matrix_norm<-as.data.frame(exp_matrix_norm)
exp_matrix_norm$p.var.test <- cbind(exp_matrix_norm,p.var.test)
exp_matrix_norm <- cbind(exp_matrix_norm,p.var.test)
View(exp_matrix_norm)
q4_data <- read.table("./data/q4_data.txt", header = T,stringsAsFactors = T)
